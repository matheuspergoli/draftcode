// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @db.Text
  isBanned      Boolean   @default(false)

  accounts Account[]
  sessions Session[]

  role UserRole @default(USER)

  projects     Project[]
  favorites    Favorite[]
  solutions    Solution[]
  social_media Social_Media[]
}

model Project {
  id          String @id @default(uuid())
  figma_url   String
  title       String @db.VarChar(40)
  image       String
  image_id    String
  brief       String @db.VarChar(255)
  description String @db.Text

  difficulty    Difficulty @relation(fields: [difficulty_id], references: [id])
  difficulty_id String     @map("difficultyId")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User   @relation(fields: [user_id], references: [id])
  user_id String @map("userId")

  favorites    Favorite[]
  solutions    Solution[]
  technologies Technology[]

  @@index([user_id])
  @@index([difficulty_id])
}

model Favorite {
  id String @id @default(cuid())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String

  @@unique([user_id, project_id])
  @@index([project_id])
}

model Technology {
  id   String @id @default(uuid())
  name String @unique

  projects Project[]
}

model Difficulty {
  id   String @id @default(uuid())
  name String @unique

  projects Project[]
}

enum SocialMedia {
  GITHUB
  LINKEDIN
  WEBSITE
}

model Social_Media {
  id   String      @id @default(uuid())
  url  String      @db.Text
  type SocialMedia

  user    User   @relation(fields: [user_id], references: [id])
  user_id String @map("userId")

  @@index([user_id])
}

model Solution {
  id         String  @id @default(uuid())
  image      String  @db.Text
  image_id   String  @db.Text
  website    String  @db.Text
  repository String  @db.Text
  approved   Boolean @default(false)

  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([project_id])
  @@index([user_id])
}
